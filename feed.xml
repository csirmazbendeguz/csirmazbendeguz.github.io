<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://csirmazbendeguz.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://csirmazbendeguz.net/" rel="alternate" type="text/html" /><updated>2019-07-20T14:03:34+02:00</updated><id>https://csirmazbendeguz.net/feed.xml</id><entry><title type="html">PHP Quiz - Part 3 - associativity</title><link href="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-3-associativity.html" rel="alternate" type="text/html" title="PHP Quiz - Part 3 - associativity" /><published>2019-06-16T00:00:00+02:00</published><updated>2019-06-16T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/16/php-quiz-part-3-associativity</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-3-associativity.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;PHP Quiz - Part 1 - for loops&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;PHP Quiz - Part 2 - echoes&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 3 - associativity&lt;/strong&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;PHP Quiz - Part 4 - hoisting&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;PHP Quiz - Part 6 - covariance&lt;/a&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 3 - associativity&lt;/h2&gt;
  &lt;p&gt;This post was inspired by Upwork's incorrect &lt;a href=&quot;https://www.upwork.com/i/interview-questions/php/&quot;&gt;PHP interview question&lt;/a&gt;.&lt;/p&gt;
  &lt;p&gt;Let's take a look at a lesser known attribute of PHP operators:&lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;32755ffb-b138-488c-82e8-07fde3506236&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;What will this code output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'true'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'false'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;
  &lt;p&gt;It will output a syntax error.&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Explanation&lt;/h2&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Operator associativity&lt;/h3&gt;
  &lt;p&gt;Operator associativity decides how operators of equal precedence are grouped.&lt;/p&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;operator&lt;/th&gt;
        &lt;th&gt;associativity&lt;/th&gt;
        &lt;th&gt;example&lt;/th&gt;
        &lt;th&gt;result&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; (addition)&lt;/td&gt;
        &lt;td&gt;left&lt;/td&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 2 + 3&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 2) + 3&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; (assignment)&lt;/td&gt;
        &lt;td&gt;right&lt;/td&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$a = $b = $c&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$a = ($b = $c)&lt;/code&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
  &lt;br /&gt;
  &lt;p&gt;
    In PHP, however, comparison operators are &lt;em&gt;non-associative&lt;/em&gt;.
    They cannot be used next to each other.
  &lt;/p&gt;
  &lt;p&gt;The expression &lt;code class=&quot;highlighter-rouge&quot;&gt;$z &gt; $y &gt; $x&lt;/code&gt; is illegal.&lt;/p&gt;
  &lt;br /&gt;
  &lt;table&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;operator&lt;/th&gt;
        &lt;th&gt;associativity&lt;/th&gt;
        &lt;th&gt;example&lt;/th&gt;
        &lt;th&gt;result&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; (greater-than)&lt;/td&gt;
        &lt;td&gt;non-associative&lt;/td&gt;
        &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$z &amp;gt; $y &amp;gt; $x&lt;/code&gt;&lt;/td&gt;
        &lt;td&gt;syntax error&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;
    &lt;h2&gt;&amp;lt;&amp;lt; previous&lt;/h2&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;
    &lt;h2&gt;next &amp;gt;&amp;gt;&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Some thoughts about operator associativity.</summary></entry><entry><title type="html">PHP Quiz - Part 4 - hoisting</title><link href="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-4-hoisting.html" rel="alternate" type="text/html" title="PHP Quiz - Part 4 - hoisting" /><published>2019-06-16T00:00:00+02:00</published><updated>2019-06-16T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/16/php-quiz-part-4-hoisting</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-4-hoisting.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;PHP Quiz - Part 1 - for loops&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;PHP Quiz - Part 2 - echoes&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;PHP Quiz - Part 3 - associativity&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 4 - hoisting&lt;/strong&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;PHP Quiz - Part 6 - covariance&lt;/a&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 4 - hoisting&lt;/h2&gt;
  &lt;p&gt;Developing modern object oriented applications kept me in blissful ignorance of PHP's less used features. :((&lt;/p&gt;
  &lt;p&gt;The following may come as a surprise to unsuspecting programmers (such as myself):&lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;06d3e30b-9cd9-45ef-839a-4f590b48f35c&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;What will this code output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Hello World!&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Explanation&lt;/h2&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Hoisting&lt;/h3&gt;
  &lt;p&gt;
    Similarly to JavaScript, function declarations are resolved at compile time.
    By the time the interpreter calls our function, it will have been already defined.
    The program will run without any problems.
  &lt;/p&gt;

  &lt;h3&gt;Restrictions on hoisting&lt;/h3&gt;
  &lt;p&gt;
    When the function is defined conditionally, this is not the case.
    For hoisting to work, it has to be defined on the top level.
    The following will throw a fatal error:
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Fatal error: Uncaught Error: Call to undefined function helloWorld().&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Includes&lt;/h3&gt;
  &lt;p&gt;What about includes?&lt;/p&gt;
  &lt;p&gt;
    Naturally, they are only resolved at runtime.
    So, when including a function, the include statement must run before the function call.
    The following will result in a fatal error too:
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Fatal error: Uncaught Error: Call to undefined function helloWorld().&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;helloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Includes the helloWorld function.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;helloWorld.php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;
    &lt;h2&gt;&amp;lt;&amp;lt; previous&lt;/h2&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;
    &lt;h2&gt;next &amp;gt;&amp;gt;&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">&quot;Hoisting&quot; in PHP.</summary></entry><entry><title type="html">PHP Quiz - Part 5 - constructors</title><link href="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-5-constructors.html" rel="alternate" type="text/html" title="PHP Quiz - Part 5 - constructors" /><published>2019-06-16T00:00:00+02:00</published><updated>2019-06-16T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/16/php-quiz-part-5-constructors</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-5-constructors.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;PHP Quiz - Part 1 - for loops&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;PHP Quiz - Part 2 - echoes&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;PHP Quiz - Part 3 - associativity&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;PHP Quiz - Part 4 - hoisting&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 5 - constructors&lt;/strong&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;PHP Quiz - Part 6 - covariance&lt;/a&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 5 - constructors&lt;/h2&gt;
  &lt;p&gt;This post was inspired by an inaccurate &lt;a href=&quot;https://en.wikipedia.org/wiki/Talk:Covariance_and_contravariance_(computer_science)#Inaccurate_PHP_example&quot;&gt;Wikipedia article&lt;/a&gt;.&lt;/p&gt;
  &lt;p&gt;
    Okay!
    We have only seen weird edge cases so far.
    This one is actually pretty important:
  &lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;a47ba42f-794b-4909-94da-58d9b84769b4&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;What will this code output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LogicException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;A&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;B&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Exception!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;B&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Explanation&lt;/h2&gt;
  &lt;h3&gt;Constructor signatures&lt;/h3&gt;
  &lt;p&gt;PHP constructors can be overridden with &lt;em&gt;any&lt;/em&gt; signature...&lt;/p&gt;
  &lt;p&gt;... even if the types are not related:&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Works fine!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Closure&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;p&gt;... or the number of parameters is different:&lt;/p&gt;

  &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// This is OK too.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__construct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;p&gt;Were they not constructors, PHP would issue a warning:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;LogicException&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Warning: Declaration of B::abc(Exception $e) should be&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// compatible with A::abc(LogicException $l)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;p&gt;More on this in the next post!&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;
    &lt;h2&gt;&amp;lt;&amp;lt; previous&lt;/h2&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;
    &lt;h2&gt;next &amp;gt;&amp;gt;&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">A (not at all obvious) difference between constructors and functions.</summary></entry><entry><title type="html">PHP Quiz - Part 6 - covariance</title><link href="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-6-covariance.html" rel="alternate" type="text/html" title="PHP Quiz - Part 6 - covariance" /><published>2019-06-16T00:00:00+02:00</published><updated>2019-06-16T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/16/php-quiz-part-6-covariance</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/16/php-quiz-part-6-covariance.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;PHP Quiz - Part 1 - for loops&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;PHP Quiz - Part 2 - echoes&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;PHP Quiz - Part 3 - associativity&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;PHP Quiz - Part 4 - hoisting&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 6 - covariance&lt;/strong&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 6 - covariance&lt;/h2&gt;
  &lt;p&gt;
    In &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt; we've seen that constructors can be safely overridden.
    What about functions?
    Brace yourselves, this is one of my favorite topics:
  &lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;fff1f1fb-e715-497c-b6ac-9c8be1ef3879&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;Will this code throw a warning (PHP 7.1)?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;
  &lt;p&gt;No, it won't.&lt;/p&gt;
  &lt;p&gt;There are a few cases where functions can be overridden with certain signatures.&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Iterable&lt;/h2&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iterable&lt;/code&gt; is a pseudo-type introduced in PHP 7.1.&lt;/p&gt;
  &lt;p style=&quot;text-align:center;&quot;&gt;
    &lt;img src=&quot;/assets/images/php-quiz-part-6-covariance/iterable.png&quot; alt=&quot;iterable's inheritance tree&quot; title=&quot;iterable's inheritance tree&quot; /&gt;
  &lt;/p&gt;
  &lt;p&gt;It's like an abstract base class for variables that can be &lt;em&gt;iterated&lt;/em&gt; with foreach (arrays, Traversable objects).&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Variance (recap)&lt;/h2&gt;
  &lt;p&gt;When a subclass overrides a method of a superclass, it is possible to change its parameter and return types.&lt;/p&gt;
  &lt;table style=&quot;margin: 0 auto;&quot;&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;Covariance&lt;/th&gt;
        &lt;th&gt;Contravariance&lt;/th&gt;
        &lt;th&gt;Invariance&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;img src=&quot;/assets/images/php-quiz-part-6-covariance/covariance.svg&quot; alt=&quot;Covariance&quot; title=&quot;Covariance&quot; /&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;/assets/images/php-quiz-part-6-covariance/contravariance.svg&quot; alt=&quot;Contravariance&quot; title=&quot;Contravariance&quot; /&gt;&lt;/td&gt;
        &lt;td&gt;&lt;img src=&quot;/assets/images/php-quiz-part-6-covariance/invariance.svg&quot; alt=&quot;Invariance&quot; title=&quot;Invariance&quot; /&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Covariance&lt;/h3&gt;
  &lt;p&gt;
    Covariance means overriding methods can return &lt;em&gt;more&lt;/em&gt; specific types.
    An &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt; is more specific than an &lt;code class=&quot;highlighter-rouge&quot;&gt;iterable&lt;/code&gt;.
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;p&gt;
    This is type safe!
    Think about polymorphism to justify why (pseudocode):
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ClassA obj = new ClassB();
T retval = obj.method();&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Contravariance&lt;/h3&gt;
  &lt;p&gt;
    Contravariance means overriding methods can accept &lt;em&gt;less&lt;/em&gt; specific parameters.
    An &lt;code class=&quot;highlighter-rouge&quot;&gt;iterable&lt;/code&gt; is less specific than an &lt;code class=&quot;highlighter-rouge&quot;&gt;array&lt;/code&gt;.
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

  &lt;p&gt;
    This is type safe too!
    Again, think about polymorphism (pseudocode):
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;ClassA obj = new ClassB();
obj.method(new T’());&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Invariance&lt;/h3&gt;
  &lt;p&gt;Invariance means the overriding method cannot change the types.&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Covariance, contravariance and PHP&lt;/h2&gt;
  &lt;p&gt;
    PHP does &lt;em&gt;not&lt;/em&gt; support covariance/contravariance.
    It's an invariant language.
    However, as always, there are a few exceptions:
  &lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;1. iterable&lt;/h3&gt;
  &lt;p&gt;By now it shouldn't come as a surprise that &lt;code class=&quot;highlighter-rouge&quot;&gt;iterable&lt;/code&gt;, the subject of this blog post is indeed covariant/contravariant.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;iterable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;iterable&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;2. parameter type widening&lt;/h3&gt;
  &lt;p&gt;
    From PHP 7.2 you can omit parameter types in overriding methods.
    This is an example of contravariance.
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;3. return types&lt;/h3&gt;
  &lt;p&gt;
    If the parent method doesn’t have a return type, it can be specified.
    This is an example of covariance.
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassB&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ClassA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;The future&lt;/h2&gt;
  &lt;p&gt;
    PHP is mostly invariant... for now.
    But there is progress!
  &lt;/p&gt;
  &lt;p&gt;
    PHP 7.4 is going to add support for real covariance/contravariance (&lt;a href=&quot;https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters&quot;&gt;rfc&lt;/a&gt;).
    It will be a great improvement to PHP's type system.
  &lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;
    &lt;h2&gt;&amp;lt;&amp;lt; previous&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Covariance, contravariance and PHP.</summary></entry><entry><title type="html">PHP Quiz - Part 2 - echoes</title><link href="https://csirmazbendeguz.net/2019/06/15/php-quiz-part-2-echoes.html" rel="alternate" type="text/html" title="PHP Quiz - Part 2 - echoes" /><published>2019-06-15T00:00:00+02:00</published><updated>2019-06-15T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/15/php-quiz-part-2-echoes</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/15/php-quiz-part-2-echoes.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;PHP Quiz - Part 1 - for loops&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 2 - echoes&lt;/strong&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;PHP Quiz - Part 3 - associativity&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;PHP Quiz - Part 4 - hoisting&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;PHP Quiz - Part 6 - covariance&lt;/a&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 2 - echoes&lt;/h2&gt;
  &lt;p&gt;
    &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; was the first PHP statement I learned.
    It went great: I echoed '&lt;em&gt;Hello World!&lt;/em&gt;' to the screen and quickly moved on to more challenging problems.
  &lt;/p&gt;
  &lt;p&gt;It took me years to notice there is something unusual about its behaviour:&lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;8257959d-b525-4b92-ad19-e36aa259a293&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;What will this code output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;baac&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Explanation&lt;/h2&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Evaluation strategy&lt;/h3&gt;
  &lt;p&gt;
    The arguments are not evaluated eagerly...
    they are evaluated one by one!
  &lt;/p&gt;
  &lt;p&gt;
    It's quite logical, actually.
    The trick is to think about them as seperate &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; statements:
  &lt;/p&gt;

  &lt;div class=&quot;compare-table&quot;&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
          &lt;/td&gt;
          &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;c&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Language constructs&lt;/h3&gt;
  &lt;p&gt;
    This happens because &lt;code class=&quot;highlighter-rouge&quot;&gt;echo&lt;/code&gt; is not a function.
    It's a language construct.
  &lt;/p&gt;
  &lt;p&gt;
    Similarly to other language constructs (namely variable declarations), it can be &quot;&lt;em&gt;stacked&lt;/em&gt;&quot; this way.
    For example:
  &lt;/p&gt;

  &lt;div class=&quot;compare-table&quot;&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
          &lt;/td&gt;
          &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
          &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;

  &lt;p&gt;
    Using commas in variable declarations is essentially the same as writing consecutive statements.
    It is legal in PHP, albeit discouraged because of readability reasons.
  &lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/14/php-quiz-part-1-for-loops.html&quot;&gt;
    &lt;h2&gt;&amp;lt;&amp;lt; previous&lt;/h2&gt;
  &lt;/a&gt;
  &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;
    &lt;h2&gt;next &amp;gt;&amp;gt;&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">How exactly do echo arguments work?</summary></entry><entry><title type="html">PHP Quiz - Part 1 - for loops</title><link href="https://csirmazbendeguz.net/2019/06/14/php-quiz-part-1-for-loops.html" rel="alternate" type="text/html" title="PHP Quiz - Part 1 - for loops" /><published>2019-06-14T00:00:00+02:00</published><updated>2019-06-14T00:00:00+02:00</updated><id>https://csirmazbendeguz.net/2019/06/14/php-quiz-part-1-for-loops</id><content type="html" xml:base="https://csirmazbendeguz.net/2019/06/14/php-quiz-part-1-for-loops.html">&lt;section class=&quot;section&quot;&gt;
  &lt;p&gt;This post is part of a series based on a presentation I gave at &lt;a href=&quot;https://cheppers.com&quot;&gt;Cheppers&lt;/a&gt; on March 20, 2019.&lt;/p&gt;
  
  &lt;ul&gt;
    
    &lt;li&gt;
      
      &lt;strong&gt;PHP Quiz - Part 1 - for loops&lt;/strong&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;PHP Quiz - Part 2 - echoes&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-3-associativity.html&quot;&gt;PHP Quiz - Part 3 - associativity&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-4-hoisting.html&quot;&gt;PHP Quiz - Part 4 - hoisting&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-5-constructors.html&quot;&gt;PHP Quiz - Part 5 - constructors&lt;/a&gt;
      
    &lt;/li&gt;
    
    &lt;li&gt;
      
      &lt;a href=&quot;/2019/06/16/php-quiz-part-6-covariance.html&quot;&gt;PHP Quiz - Part 6 - covariance&lt;/a&gt;
      
    &lt;/li&gt;
    
  &lt;/ul&gt;
&lt;/section&gt;


&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;PHP Quiz - Part 1 - for loops&lt;/h2&gt;
  &lt;p&gt;
    For loops: one of the most fundamental and ubiquitous control flow statements.
    I never would have thought I could learn anything new about them.
    I was wrong:
  &lt;/p&gt;
  &lt;script&gt;(function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(d.getElementById(id))return;js=d.createElement(s);js.id=id;js.src='https://embed.playbuzz.com/sdk.js';fjs.parentNode.insertBefore(js,fjs);}(document,'script','playbuzz-sdk'));&lt;/script&gt;
  &lt;div class=&quot;playbuzz&quot; data-id=&quot;be7fa8ae-6b22-44bc-a397-c0bec2ce5d08&quot; data-show-share=&quot;false&quot; data-show-info=&quot;false&quot;&gt;&lt;/div&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Question&lt;/h2&gt;
  &lt;p&gt;What will this code output?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Answer&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;0,0
1,1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Explanation&lt;/h2&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Comma operator&lt;/h3&gt;
  &lt;p&gt;
    In C, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Comma_operator&quot;&gt;comma operator&lt;/a&gt; is an operator that evaluates two expressions and returns the result of the second one.
    For example:
  &lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/* prints &quot;Hello World!” and assigns 3 to 'a' */&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;Comma operator in PHP&lt;/h3&gt;
  &lt;p&gt;
    This ancient operator did not stand the test of time.
    Not many programming languages support it.
  &lt;/p&gt;
  &lt;p&gt;
    PHP is no exception.
    The comma operator is not listed in the &lt;a href=&quot;https://www.php.net/manual/en/language.operators.precedence.php&quot;&gt;precedence table&lt;/a&gt; and using it will generally result in a syntax error:
  &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;php&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Parse error: syntax error, unexpected ',' in ...&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h3&gt;For loop conditions&lt;/h3&gt;
  &lt;p&gt;However, there is an exception to the rule: for loop conditions.&lt;/p&gt;
  &lt;p&gt;
    For some strange reason, in for loop conditions the comma operator is correctly evaluated.
    Weird!
  &lt;/p&gt;
  &lt;div class=&quot;compare-table&quot;&gt;
    &lt;table&gt;
      &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;/td&gt;
        &lt;td&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/div&gt;
  &lt;p&gt;
    In this case, the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;$i &lt; 3, $j &lt; 2&lt;/code&gt; has the same effect as &lt;code class=&quot;highlighter-rouge&quot;&gt;$j &lt; 2&lt;/code&gt;.
    The first operand is evaluated, but its result is disregarded.
  &lt;/p&gt;
  &lt;p&gt;The loop will only iterate twice.&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;section&quot;&gt;
  &lt;h2&gt;Conclusion&lt;/h2&gt;
  &lt;p&gt;
    PHP is an exceptional language.
    Literally.
    It has a lot of exceptions and special cases.
  &lt;/p&gt;
  &lt;p&gt;
    Fortunately, you don't really need to know about them.
    There are not many great uses of the comma operator.
    In fact, it's better if you just forget about it.
  &lt;/p&gt;
  &lt;p&gt;Anyway, if you happen to know the rationale behind this design decision, please let me know in the comments.&lt;/p&gt;
  &lt;p&gt;In the next post we will continue looking at weird commas in a different context.&lt;/p&gt;
&lt;/section&gt;

&lt;section class=&quot;question-paginator&quot;&gt;
  &lt;a href=&quot;/2019/06/15/php-quiz-part-2-echoes.html&quot;&gt;
    &lt;h2&gt;next &amp;gt;&amp;gt;&lt;/h2&gt;
  &lt;/a&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Everyone knows for loops... right?</summary></entry></feed>